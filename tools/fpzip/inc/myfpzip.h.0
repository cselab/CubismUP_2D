#include "fpzip.h"
#include <climits>

//extern "C"
//{
static void fpz_compress3D(void *in, unsigned int inbytes, int bs, void *out, unsigned int *outbytes, int isfloat)
{
	unsigned int dim[4] = {32, 32, 32, 1};
	int prec[1];
	int dp, i;

	if (bs > 0) for (i = 0; i < 3; i++) dim[i] = bs;

	if (isfloat) {
		prec[0]  = (CHAR_BIT * sizeof(float));
		dp = 0;
	}
	else {
		prec[0]  = (CHAR_BIT * sizeof(double));
		dp = 1;
	}

//	*outbytes = fpzip_memory_write(out, inbytes, in, prec, dp, dim[0], dim[1], dim[2], dim[3]);
	*outbytes = fpzip_memory_write(out, inbytes, in, NULL, dp, dim[0], dim[1], dim[2], dim[3]);
}

static void fpz_compress1D(void *in, unsigned int inbytes, void *out, unsigned int *outbytes, int isfloat)
{
	unsigned int dim[4] = {1, 1, 1, 1};
	int prec[1];
	int dp;
	if (isfloat) {
		dim[0] = 32*32*32; //inbytes/sizeof(float);
		prec[0]  = (CHAR_BIT * sizeof(float));
		dp = 0;
	}
	else {
		dim[0] = 32*32*32; //inbytes/sizeof(double);
		prec[0]  = (CHAR_BIT * sizeof(double));
		dp = 1;
	}

//	*outbytes = fpzip_memory_write(out, inbytes, in, prec, dp, dim[0], dim[1], dim[2], dim[3]);
	*outbytes = fpzip_memory_write(out, inbytes, in, NULL, dp, dim[0], dim[1], dim[2], dim[3]);
}


static void fpz_decompress3D(char *in, unsigned int inbytes, int bs, char *out, unsigned int *outbytes, int isfloat)
{
	unsigned int dim[4] = {32, 32, 32, 1};
	int prec[1];
	int dp, i;

	if (bs > 0) for (i = 0; i < 3; i++) dim[i] = bs;

	if (isfloat) {
		prec[0]  = (CHAR_BIT * sizeof(float));
		dp = 0;
	}
	else {
		prec[0]  = (CHAR_BIT * sizeof(double));
		dp = 1;
	}

//	fpzip_memory_read(in, out, prec, dp, dim[0], dim[1], dim[2], dim[3]);
	*outbytes = fpzip_memory_read(in, out, NULL, dp, dim[0], dim[1], dim[2], dim[3]);
}

static void fpz_decompress1D(char *in, unsigned int inbytes, char *out, unsigned int *outbytes, int isfloat)
{
	unsigned int dim[4] = {1, 1, 1, 1};
	int prec[1];
	int dp;
	if (isfloat) {
		dim[0] = 32*32*32; //inbytes/sizeof(float);
		prec[0]  = (CHAR_BIT * sizeof(float));
		dp = 0;
	}
	else {
		dim[0] = 32*23*32; //inbytes/sizeof(double);
		prec[0]  = (CHAR_BIT * sizeof(double));
		dp = 1;
	}

//	fpzip_memory_read(in, out, prec, dp, dim[0], dim[1], dim[2], dim[3]);
	*outbytes = fpzip_memory_read(in, out, NULL, dp, dim[0], dim[1], dim[2], dim[3]);
}

//}

